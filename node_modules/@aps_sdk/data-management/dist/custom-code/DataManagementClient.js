"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataManagementClient = void 0;
const api_1 = require("../api");
class DataManagementClient {
    constructor(sdkManager) {
        this.commandsApi = new api_1.CommandsApi(sdkManager);
        this.foldersApi = new api_1.FoldersApi(sdkManager);
        this.hubsApi = new api_1.HubsApi(sdkManager);
        this.itemsApi = new api_1.ItemsApi(sdkManager);
        this.projectsApi = new api_1.ProjectsApi(sdkManager);
        this.versionsApi = new api_1.VersionsApi(sdkManager);
    }
    postCommand(accessToken, projectId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.commandsApi.postCommand(accessToken, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.commandPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getFolder(accessToken, projectId, folderId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.getFolder(accessToken, projectId, folderId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.ifModifiedSince, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getFolderContents(accessToken, projectId, folderId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.getFolderContents(accessToken, projectId, folderId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterLastModifiedTimeRollup, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.pageNumber, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.pageLimit, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.includeHidden, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getFolderParent(accessToken, projectId, folderId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.getFolderParent(accessToken, projectId, folderId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getFolderRefs(accessToken, projectId, folderId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.getFolderRefs(accessToken, projectId, folderId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getFolderRelationshipsLinks(accessToken, projectId, folderId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.getFolderRelationshipsLinks(accessToken, projectId, folderId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getFolderRelationshipsRefs(accessToken, folderId, projectId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.getFolderRelationshipsRefs(accessToken, folderId, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterRefType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterDirection, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getFolderSearch(accessToken, projectId, folderId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.getFolderSearch(accessToken, projectId, folderId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filter, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.pageNumber, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    patchFolder(accessToken, projectId, folderId, modifyFolderPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.patchFolder(accessToken, projectId, folderId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, modifyFolderPayload, optionalArgs.options);
            return response.content;
        });
    }
    createFolder(accessToken, projectId, folderPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.createFolder(accessToken, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, folderPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    createFolderRelationshipsRef(accessToken, folderId, projectId, relationshipRefsPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.foldersApi.createFolderRelationshipsRef(accessToken, folderId, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, relationshipRefsPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getHub(accessToken, hubId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.hubsApi.getHub(accessToken, hubId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getHubs(accessToken, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.hubsApi.getHubs(accessToken, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterName, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getItem(accessToken, projectId, itemId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.getItem(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.includePathInProject, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getItemParentFolder(accessToken, projectId, itemId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.getItemParentFolder(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getItemRefs(accessToken, projectId, itemId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.getItemRefs(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getItemRelationshipsLinks(accessToken, projectId, itemId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.getItemRelationshipsLinks(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getItemRelationshipsRefs(accessToken, projectId, itemId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.getItemRelationshipsRefs(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterRefType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterDirection, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getItemTip(accessToken, projectId, itemId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.getItemTip(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getItemVersions(accessToken, projectId, itemId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.getItemVersions(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterVersionNumber, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.pageNumber, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.pageLimit, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    patchItem(accessToken, projectId, itemId, modifyItemPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.patchItem(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, modifyItemPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    createItem(accessToken, projectId, itemPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.createItem(accessToken, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.copyFrom, itemPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    createItemRelationshipsRef(accessToken, projectId, itemId, relationshipRefsPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.itemsApi.createItemRelationshipsRef(accessToken, projectId, itemId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, relationshipRefsPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getDownload(accessToken, projectId, downloadId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectsApi.getDownload(accessToken, projectId, downloadId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getDownloadJob(accessToken, projectId, jobId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectsApi.getDownloadJob(accessToken, projectId, jobId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    createDownload(accessToken, projectId, downloadPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectsApi.createDownload(accessToken, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, downloadPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getHubProjects(accessToken, hubId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectsApi.getHubProjects(accessToken, hubId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.pageNumber, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.pageLimit, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getProject(accessToken, hubId, projectId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectsApi.getProject(accessToken, hubId, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getProjectHub(accessToken, hubId, projectId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectsApi.getProjectHub(accessToken, hubId, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getProjectTopFolders(accessToken, hubId, projectId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectsApi.getProjectTopFolders(accessToken, hubId, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.excludeDeleted, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.projectFilesOnly, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    createStorage(accessToken, projectId, storagePayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectsApi.createStorage(accessToken, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, storagePayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getVersion(accessToken, projectId, versionId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.getVersion(accessToken, projectId, versionId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getVersionDownloadFormats(accessToken, projectId, versionId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.getVersionDownloadFormats(accessToken, projectId, versionId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getVersionDownloads(accessToken, projectId, versionId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.getVersionDownloads(accessToken, projectId, versionId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterFormatFileType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getVersionItem(accessToken, projectId, versionId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.getVersionItem(accessToken, projectId, versionId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getVersionRefs(accessToken, projectId, versionId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.getVersionRefs(accessToken, projectId, versionId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getVersionRelationshipsLinks(accessToken, projectId, versionId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.getVersionRelationshipsLinks(accessToken, projectId, versionId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    getVersionRelationshipsRefs(accessToken, projectId, versionId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.getVersionRelationshipsRefs(accessToken, projectId, versionId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterRefType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterDirection, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.filterExtensionType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    patchVersion(accessToken, projectId, versionId, modifyVersionPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.patchVersion(accessToken, projectId, versionId, modifyVersionPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    createVersion(accessToken, projectId, versionPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.createVersion(accessToken, projectId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.copyFrom, versionPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    createVersionRelationshipsRef(accessToken, projectId, versionId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.versionsApi.createVersionRelationshipsRef(accessToken, projectId, versionId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xUserId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.relationshipRefsPayload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
}
exports.DataManagementClient = DataManagementClient;
