import { ApsServiceRequestConfig, SdkManager } from "@aps_sdk/autodesk-sdkmanager";
import { CommandsApi, HubsApi, ItemsApi, ProjectsApi, FoldersApi, VersionsApi, GetFolderRelationshipsRefsFilterRefTypeEnum, GetFolderRelationshipsRefsFilterDirectionEnum, GetItemRelationshipsRefsFilterRefTypeEnum, GetItemRelationshipsRefsFilterDirectionEnum, GetVersionRelationshipsRefsFilterRefTypeEnum, GetVersionRelationshipsRefsFilterDirectionEnum } from "../api";
import { Command, CommandPayload, Download, DownloadDetails, DownloadFormats, DownloadPayload, Downloads, Folder, FolderContents, FolderPayload, FolderRefs, Hub, Hubs, Item, ItemPayload, ItemTip, Job, ModifyFolderPayload, ModifyItemPayload, ModifyVersionPayload, Project, Projects, Refs, RelationshipLinks, RelationshipRefs, RelationshipRefsPayload, Search, StoragePayload, TopFolders, Version, VersionDetails, VersionPayload, Versions } from "../model";
export declare class DataManagementClient {
    commandsApi: CommandsApi;
    foldersApi: FoldersApi;
    hubsApi: HubsApi;
    itemsApi: ItemsApi;
    projectsApi: ProjectsApi;
    versionsApi: VersionsApi;
    constructor(sdkManager: SdkManager);
    postCommand(accessToken: string, projectId: string, optionalArgs?: {
        xUserId?: string;
        commandPayload?: CommandPayload;
        options?: ApsServiceRequestConfig;
    }): Promise<Command>;
    getFolder(accessToken: string, projectId: string, folderId: string, optionalArgs?: {
        ifModifiedSince?: string;
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Folder>;
    getFolderContents(accessToken: string, projectId: string, folderId: string, optionalArgs?: {
        xUserId?: string;
        filterType?: Array<string>;
        filterId?: Array<string>;
        filterExtensionType?: Array<string>;
        filterLastModifiedTimeRollup?: Array<string>;
        pageNumber?: number;
        pageLimit?: number;
        includeHidden?: boolean;
        options?: ApsServiceRequestConfig;
    }): Promise<FolderContents>;
    getFolderParent(accessToken: string, projectId: string, folderId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Folder>;
    getFolderRefs(accessToken: string, projectId: string, folderId: string, optionalArgs?: {
        xUserId?: string;
        filterType?: string;
        filterId?: string;
        filterExtensionType?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<FolderRefs>;
    getFolderRelationshipsLinks(accessToken: string, projectId: string, folderId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<RelationshipLinks>;
    getFolderRelationshipsRefs(accessToken: string, folderId: string, projectId: string, optionalArgs?: {
        xUserId?: string;
        filterType?: Array<string>;
        filterId?: Array<string>;
        filterRefType?: GetFolderRelationshipsRefsFilterRefTypeEnum;
        filterDirection?: GetFolderRelationshipsRefsFilterDirectionEnum;
        filterExtensionType?: Array<string>;
        options?: ApsServiceRequestConfig;
    }): Promise<RelationshipRefs>;
    getFolderSearch(accessToken: string, projectId: string, folderId: string, optionalArgs?: {
        filter?: string;
        pageNumber?: number;
        options?: ApsServiceRequestConfig;
    }): Promise<Search>;
    patchFolder(accessToken: string, projectId: string, folderId: string, modifyFolderPayload: ModifyFolderPayload, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Folder>;
    createFolder(accessToken: string, projectId: string, folderPayload: FolderPayload, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Folder>;
    createFolderRelationshipsRef(accessToken: string, folderId: string, projectId: string, relationshipRefsPayload: RelationshipRefsPayload, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Response>;
    getHub(accessToken: string, hubId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Hub>;
    getHubs(accessToken: string, optionalArgs?: {
        xUserId?: string;
        filterId?: Array<string>;
        filterName?: string;
        filterExtensionType?: Array<string>;
        options?: ApsServiceRequestConfig;
    }): Promise<Hubs>;
    getItem(accessToken: string, projectId: string, itemId: string, optionalArgs?: {
        xUserId?: string;
        includePathInProject?: boolean;
        options?: ApsServiceRequestConfig;
    }): Promise<Item>;
    getItemParentFolder(accessToken: string, projectId: string, itemId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Folder>;
    getItemRefs(accessToken: string, projectId: string, itemId: string, optionalArgs?: {
        xUserId?: string;
        filterType?: Array<string>;
        filterId?: Array<string>;
        filterExtensionType?: Array<string>;
        options?: ApsServiceRequestConfig;
    }): Promise<Refs>;
    getItemRelationshipsLinks(accessToken: string, projectId: string, itemId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<RelationshipLinks>;
    getItemRelationshipsRefs(accessToken: string, projectId: string, itemId: string, optionalArgs?: {
        xUserId?: string;
        filterType?: Array<string>;
        filterId?: Array<string>;
        filterRefType?: GetItemRelationshipsRefsFilterRefTypeEnum;
        filterDirection?: GetItemRelationshipsRefsFilterDirectionEnum;
        filterExtensionType?: Array<string>;
        options?: ApsServiceRequestConfig;
    }): Promise<RelationshipRefs>;
    getItemTip(accessToken: string, projectId: string, itemId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<ItemTip>;
    getItemVersions(accessToken: string, projectId: string, itemId: string, optionalArgs?: {
        xUserId?: string;
        filterId?: Array<string>;
        filterExtensionType?: Array<string>;
        filterVersionNumber?: Array<number>;
        pageNumber?: number;
        pageLimit?: number;
        options?: ApsServiceRequestConfig;
    }): Promise<Versions>;
    patchItem(accessToken: string, projectId: string, itemId: string, modifyItemPayload: ModifyItemPayload, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Item>;
    createItem(accessToken: string, projectId: string, itemPayload: ItemPayload, optionalArgs?: {
        xUserId?: string;
        copyFrom?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Item>;
    createItemRelationshipsRef(accessToken: string, projectId: string, itemId: string, relationshipRefsPayload: RelationshipRefsPayload, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Response>;
    getDownload(accessToken: string, projectId: string, downloadId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Download>;
    getDownloadJob(accessToken: string, projectId: string, jobId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Job>;
    createDownload(accessToken: string, projectId: string, downloadPayload: DownloadPayload, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<DownloadDetails>;
    getHubProjects(accessToken: string, hubId: string, optionalArgs?: {
        xUserId?: string;
        filterId?: Array<string>;
        filterExtensionType?: Array<string>;
        pageNumber?: number;
        pageLimit?: number;
        options?: ApsServiceRequestConfig;
    }): Promise<Projects>;
    getProject(accessToken: string, hubId: string, projectId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Project>;
    getProjectHub(accessToken: string, hubId: string, projectId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Hub>;
    getProjectTopFolders(accessToken: string, hubId: string, projectId: string, optionalArgs?: {
        xUserId?: string;
        excludeDeleted?: boolean;
        projectFilesOnly?: boolean;
        options?: ApsServiceRequestConfig;
    }): Promise<TopFolders>;
    createStorage(accessToken: string, projectId: string, storagePayload: StoragePayload, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Storage>;
    getVersion(accessToken: string, projectId: string, versionId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Version>;
    getVersionDownloadFormats(accessToken: string, projectId: string, versionId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<DownloadFormats>;
    getVersionDownloads(accessToken: string, projectId: string, versionId: string, optionalArgs?: {
        xUserId?: string;
        filterFormatFileType?: Array<string>;
        options?: ApsServiceRequestConfig;
    }): Promise<Downloads>;
    getVersionItem(accessToken: string, projectId: string, versionId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<Item>;
    getVersionRefs(accessToken: string, projectId: string, versionId: string, optionalArgs?: {
        xUserId?: string;
        filterType?: Array<string>;
        filterId?: Array<string>;
        filterExtensionType?: Array<string>;
        options?: ApsServiceRequestConfig;
    }): Promise<Refs>;
    getVersionRelationshipsLinks(accessToken: string, projectId: string, versionId: string, optionalArgs?: {
        xUserId?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<RelationshipLinks>;
    getVersionRelationshipsRefs(accessToken: string, projectId: string, versionId: string, optionalArgs?: {
        xUserId?: string;
        filterType?: Array<string>;
        filterId?: Array<string>;
        filterRefType?: GetVersionRelationshipsRefsFilterRefTypeEnum;
        filterDirection?: GetVersionRelationshipsRefsFilterDirectionEnum;
        filterExtensionType?: Array<string>;
        options?: ApsServiceRequestConfig;
    }): Promise<RelationshipRefs>;
    patchVersion(accessToken: string, projectId: string, versionId: string, modifyVersionPayload: ModifyVersionPayload, optionalArgs?: {
        options?: ApsServiceRequestConfig;
    }): Promise<Version>;
    createVersion(accessToken: string, projectId: string, versionPayload: VersionPayload, optionalArgs?: {
        xUserId?: string;
        copyFrom?: string;
        options?: ApsServiceRequestConfig;
    }): Promise<VersionDetails>;
    createVersionRelationshipsRef(accessToken: string, projectId: string, versionId: string, optionalArgs?: {
        xUserId?: string;
        relationshipRefsPayload?: RelationshipRefsPayload;
        options?: ApsServiceRequestConfig;
    }): Promise<Version>;
}
